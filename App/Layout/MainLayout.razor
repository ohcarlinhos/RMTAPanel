@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage
@inject CustomAuthStateProvider AuthProvider
@inject NavigationManager Navigation

<MudThemeProvider/>
<MudPopoverProvider/>

<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Color="Color.Dark">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" OnClick="DrawerToggle" Color="Color.Inherit"/>
        <MudSpacer/>
        <MudStack>
            <AuthorizeView>
                <Authorized>
                    <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="@Logout">Sair</MudButton>
                </Authorized>

                <NotAuthorized>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Login">Acessar</MudButton>
                </NotAuthorized>
            </AuthorizeView>
        </MudStack>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen">
        <NavBar/>
    </MudDrawer>

    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;

    protected override async Task OnInitializedAsync()
    {
        var drawer = await LocalStorage.GetItemAsync<bool>("drawer");
        _drawerOpen = drawer;
    }

    private async Task DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
        await LocalStorage.SetItemAsync("drawer", _drawerOpen);
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("jwt_token");
        await AuthProvider.NotifyStateChanged();

        Navigation.NavigateTo("/login");
    }

    private void Login()
    {
        Navigation.NavigateTo("/login");
    }

}