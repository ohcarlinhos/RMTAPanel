@using Shared.Auth
@using App.Services

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage
@inject IWebAssemblyHostEnvironment Env
@inject WebAssemblyHostConfiguration Config

@inject CustomAuthStateProvider AuthProvider
@inject AuthenticateService AuthService
@inject HttpErrorSnackbarHandle HttpErrorSnackbarHandle

<MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
    <MudPaper Class="pa-4" Width="100%">
        <MudText Typo="Typo.h6" HtmlTag="h3">Acessar</MudText>

        <EditForm Model="@_loginDto" OnValidSubmit="@SubmitForm">
            <DataAnnotationsValidator/>

            <MudTextField
                @bind-Value="_loginDto.Email"
                Label="Email"
                InputType="InputType.Email"
                For="@(() => _loginDto.Email)"/>

            <MudTextField
                @bind-Value="_loginDto.Password"
                Label="Senha"
                InputType="InputType.Password"
                For="@(() => _loginDto.Password)"/>

            <MudStack Class="mt-2">
                <MudButton
                    Variant="Variant.Filled"
                    ButtonType="ButtonType.Submit"
                    Color="Color.Primary"
                    Disabled="_isFetch"
                    Class="mt-4">
                    @if (_isFetch)
                    {
                        <MudProgressCircular Indeterminate="true" Size="Size.Small"/>
                    }
                    else
                    {
                        @("Acessar")
                    }
                </MudButton>
            </MudStack>
        </EditForm>
    </MudPaper>
</MudStack>

@code {
    private LoginDto _loginDto = new();
    private bool _isFetch;

    protected override void OnInitialized()
    {
        if (Env.IsDevelopment())
        {
            if (string.IsNullOrEmpty(Config["MockEmailLogin"]) == false)
                _loginDto.Email = Config["MockEmailLogin"]!;
            if (string.IsNullOrEmpty(Config["MockEmailLogin"]) == false)
                _loginDto.Password = Config["MockPasswordLogin"]!;
        }
    }

    async Task SubmitForm()
    {
        try
        {
            _isFetch = true;
            var response = await Http.PostAsJsonAsync("auth/login/panel", _loginDto);

            if (await HttpErrorSnackbarHandle.IsNotOk(response)) return;

            var content = await response.Content.ReadFromJsonAsync<JwtData>();
            if (content != null) await AuthService.SetSate(content.Token);
        }
        catch (HttpRequestException e)
        {
            HttpErrorSnackbarHandle.GeneralError(e);
        }
        finally
        {
            _isFetch = false;
        }
    }

}