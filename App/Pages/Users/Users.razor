@page "/users"

@using Shared.User
@using System.Security.Claims
@using Shared.General.Pagination
@using Shared.General.Util

@inject HttpClient Http
@inject IDialogService DialogService
@inject HttpErrorSnackbarHandle HttpErrorSnackbarHandle
@inject UrlQueriesHandle UrlQueriesHandle

<PageTitle>Usuários | Painel - Registra meu tempo aí!</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-20">
    <MudGrid>
        <MudItem sm="12">
            <MudStack Row="true" Justify="Justify.SpaceAround" AlignItems="AlignItems.Start">
                <MudText Typo="Typo.h4" HtmlTag="h2" Class="pb-4">Usuários</MudText>

                <MudSpacer/>

                <MudStack Style="max-width: 280px; width: 100%">
                    <MudTextField
                        T="string"
                        ValueChanged="@Search"
                        Immediate="true"
                        Placeholder="Pesquisar"
                        Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search"
                        Clearable="true"
                        ClearIcon="@Icons.Material.Filled.Close"
                        DebounceInterval="1000"
                        MaxLength="60"
                        Counter="60"/>
                </MudStack>

                <MudButton
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Size="Size.Medium"
                    OnClick="@CreateUser">
                    Criar usuário
                </MudButton>
            </MudStack>

            <MudTable Hover="true" ServerData="ServerReload" @ref="_table">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Nome</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Papel</MudTh>
                    <MudTh>Ativo</MudTh>
                    <MudTh>Verificado</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Nome">@context.Name</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="Papel">@context.UserRoleLabel</MudTd>
                    <MudTd DataLabel="Ativo">@(context.IsActive ? "Sim" : "Não")</MudTd>
                    <MudTd DataLabel="Verificado">@(context.IsVerified ? "Sim" : "Não")</MudTd>

                    <MudTd DataLabel="Ações">
                        <MudMenu Label="Ações" PositionAtCursor="true">
                            <MudMenuItem OnClick="() => EditPassword(context)">Alterar senha</MudMenuItem>
                            <MudMenuItem OnClick="() => EditRole(context)">Alterar papel</MudMenuItem>

                            <MudMenuItem OnClick="() => EditUser(context)">Editar usuário</MudMenuItem>
                            <MudMenuItem
                                OnClick="() => Disable(context)"
                                Disabled="@(context.Id == UserClaims.Id(MyClaims))">
                                @(context.IsActive ? "Desativar" : "Ativar") usuário
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    @if (_table?.GetFilteredItemsCount() == 0 && !_table.Loading)
                    {
                        <MudStack Class="ma-10" AlignItems="AlignItems.Center">
                            <MudText>Nenhum usuário encontrado.</MudText>
                        </MudStack>
                    }

                    <MudTablePager
                        PageSizeOptions="@(new[] { 10, 20, 30 })"
                        RowsPerPageString="Usuários por página:"
                        InfoFormat="{first_item}-{last_item} de {all_items}"/>
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private MudTable<UserMap>? _table;
    [CascadingParameter] private Task<AuthenticationState>? AuthState { get; set; }

    private ClaimsPrincipal MyClaims { get; set; } = new();
    private string _searchString = "";

    private readonly DialogOptions _modalOptions = new()
    {
        CloseButton = true,
        MaxWidth = MaxWidth.ExtraSmall,
        FullWidth = true,
        CloseOnEscapeKey = false,
        BackdropClick = false
    };

    protected override async Task OnInitializedAsync()
    {
        if (AuthState != null)
        {
            var authState = await AuthState;
            MyClaims = authState.User;
        }
    }

    private async Task<TableData<UserMap>> ServerReload(TableState state, CancellationToken token)
    {
        var paginationQuery = new PaginationQuery
        {
            Page = state.Page + 1,
            PerPage = state.PageSize,
            Search = _searchString
        };

        var result = await GetUsers(paginationQuery);
        var tableData = new TableData<UserMap>();
        if (result == null) return tableData;

        tableData.Items = result.Data;
        tableData.TotalItems = result.TotalItems;
        return tableData;
    }

    private void Search(string search)
    {
        _searchString = search;
        _table!.ReloadServerData();
    }

    private async Task<Pagination<UserMap>?> GetUsers(PaginationQuery paginationQuery)
    {
        try
        {
            return await Http.GetFromJsonAsync<Pagination<UserMap>>(
                UrlQueriesHandle.FromPagination("user", paginationQuery)
            );
        }
        catch (HttpRequestException e)
        {
            HttpErrorSnackbarHandle.GeneralError(e);
        }

        return null;
    }

    private async Task HandleCloseModal(IDialogReference dialog)
    {
        var result = await dialog.Result;
        if (result is { Canceled: false }) await _table!.ReloadServerData();
    }

    private async Task CreateUser()
    {
        var dialog = await DialogService.ShowAsync<CreateUserModal>("Criar usuário", _modalOptions);
        await HandleCloseModal(dialog);
    }

    private async Task EditUser(UserMap user)
    {
        var dialogParams = new DialogParameters { { "User", user } };
        var dialog = await DialogService.ShowAsync<EditUserModal>("Editar usuário", dialogParams, _modalOptions);
        await HandleCloseModal(dialog);
    }

    private async Task EditPassword(UserMap user)
    {
        var dialogParams = new DialogParameters { { "User", user } };

        var dialog = await DialogService.ShowAsync<EditPasswordModal>("Alterar senha", dialogParams, _modalOptions);
        await HandleCloseModal(dialog);
    }

    private async Task EditRole(UserMap user)
    {
        var dialogParams = new DialogParameters { { "User", user } };
        var dialog = await DialogService.ShowAsync<EditRoleModal>("Alterar papel", dialogParams, _modalOptions);
        await HandleCloseModal(dialog);
    }

    private async Task Disable(UserMap user)
    {
        var dialogParams = new DialogParameters { { "User", user } };
        var dialog = await DialogService.ShowAsync<DisableUserModal>(
            $"{(user.IsActive ? "Desativar" : "Ativar")} usuário",
            dialogParams,
            _modalOptions
        );
        await HandleCloseModal(dialog);
    }

}