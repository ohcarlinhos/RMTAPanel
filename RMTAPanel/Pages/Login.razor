@page "/login"
@using Shared.Auth
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Acessar</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-20">
    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudPaper Class="pa-4" Width="100%">
            <MudText Typo="Typo.h6" HtmlTag="h3">Acessar</MudText>

            <EditForm Model="@_loginDto" OnValidSubmit="@SubmitForm">
                <DataAnnotationsValidator/>

                <MudTextField
                    @bind-Value="_loginDto.Email"
                    Label="Email"
                    InputType="InputType.Email"
                    For="@(() => _loginDto.Email)"/>

                <MudTextField
                    @bind-Value="_loginDto.Password"
                    Label="Senha"
                    InputType="InputType.Password"
                    For="@(() => _loginDto.Password)"/>

                <MudStack Class="mt-2">
                    <MudButton
                        Variant="Variant.Filled"
                        ButtonType="ButtonType.Submit"
                        Color="Color.Primary"
                        Class="mt-4">
                        Acessar
                    </MudButton>
                </MudStack>
            </EditForm>
        </MudPaper>
    </MudStack>
</MudContainer>

@code {
    [Inject] HttpClient Http { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] ILocalStorageService LocalStoreage { get; set; }
    [Inject] AuthenticationStateProvider AuthProvider { get; set; }

    class ErrorApi
    {
        public string? Message { get; set; }
    }

    class AuthResponse
    {
        public string Token { get; set; }
    }

    LoginDto _loginDto = new();

    async Task SubmitForm()
    {
        var result = await Http.PostAsJsonAsync("auth/login", _loginDto);

        if (!result.IsSuccessStatusCode)
        {
            var errorContent = await result.Content.ReadFromJsonAsync<ErrorApi>();
            Snackbar.Add(errorContent.Message ?? "Erro", Severity.Error);
            return;
        }

        var content = await result.Content.ReadFromJsonAsync<AuthResponse>();
        
        if (content == null || string.IsNullOrEmpty(content.Token)) return;

        await LocalStoreage.SetItemAsync("jwt_token", content.Token);
        await AuthProvider.GetAuthenticationStateAsync();
    }
}