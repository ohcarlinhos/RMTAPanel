@using Shared.Auth
@using RMTAPanel.Services

<MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
    <MudPaper Class="pa-4" Width="100%">
        <MudText Typo="Typo.h6" HtmlTag="h3">Acessar</MudText>

        <EditForm Model="@_loginDto" OnValidSubmit="@SubmitForm">
            <DataAnnotationsValidator/>

            <MudTextField
                @bind-Value="_loginDto.Email"
                Label="Email"
                InputType="InputType.Email"
                For="@(() => _loginDto.Email)"/>

            <MudTextField
                @bind-Value="_loginDto.Password"
                Label="Senha"
                InputType="InputType.Password"
                For="@(() => _loginDto.Password)"/>

            <MudStack Class="mt-2">
                <MudButton
                    Variant="Variant.Filled"
                    ButtonType="ButtonType.Submit"
                    Color="Color.Primary"
                    Class="mt-4">
                    Acessar
                </MudButton>
            </MudStack>
        </EditForm>
    </MudPaper>
</MudStack>

@code {
    [Inject] HttpClient? Http { get; set; }
    [Inject] ISnackbar? Snackbar { get; set; }
    [Inject] ILocalStorageService? LocalStorage { get; set; }
    [Inject] CustomAuthStateProvider? AuthProvider { get; set; }
    [Inject] AuthenticateService? AuthService { get; set; }

    LoginDto _loginDto = new() { Email = "carlinhos@test.com", Password = "Ska$312d%$1" };

    async Task SubmitForm()
    {
        try
        {
            var response = await Http!
                .PostAsJsonAsync("auth/login", _loginDto);

            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadFromJsonAsync<ErrorResult>();
                if (string.IsNullOrEmpty(errorContent?.Message)) response.EnsureSuccessStatusCode();
                Snackbar!.Add(errorContent?.Message, Severity.Error);
                return;
            }

            var content = await response.Content.ReadFromJsonAsync<JwtData>();
            if(content != null) await AuthService!.SetSate(content.Token);
        }
        catch (HttpRequestException)
        {
            Snackbar!.Add(ApiErrors.GenericErrorServe, Severity.Error);
        }
    }

}