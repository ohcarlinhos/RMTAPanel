@page "/register-codes"
@using System.Web

@inject HttpClient Http 
@inject IDialogService DialogService 
@inject HandleHttpErrorSnackbar HandleHttpErrorSnackbar
@inject HandleUrlQueries HandleUrlQueries

<PageTitle>Códigos de Registro</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-20">
    <MudGrid>
        <MudItem sm="12">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pb-4">
                <MudText Typo="Typo.h4" HtmlTag="h2">Códigos de Registro</MudText>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Generate">Gerar Código</MudButton>
            </MudStack>

            <MudTable ServerData="ServerReload" Hover="true" @ref="_table">
                <HeaderContent>
                    <MudTh>Chave</MudTh>
                    <MudTh>Disponível</MudTh>
                    <MudTh>Usada por</MudTh>
                    @* <MudTh>Para uso de</MudTh> *@
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Chave">
                        <MudToggleIconButton
                            @bind-Toggled="context.ShowCode"
                            Icon="@Icons.Material.Filled.CodeOff"
                            ToggledIcon="@Icons.Material.Filled.Code">
                        </MudToggleIconButton>

                        @if (context.ShowCode)
                        {
                            <CopyHiddenText DisableCopy="@(context.IsUsed)" Text="@context.Id"/>
                        }
                        else
                        {
                            @("...")
                        }
                    </MudTd>
                    <MudTd DataLabel="Disponível">@(!context.IsUsed ? "Sim" : "Não") </MudTd>
                    <MudTd DataLabel="Usada por">@(!string.IsNullOrEmpty(context.User?.Name) ? context.User.Name : "-")</MudTd>
                    @* <MudTd DataLabel="Para uso de">@(!string.IsNullOrEmpty(context.Email) ? context.Email : "-")</MudTd> *@
                    <MudTd DataLabel="Ações">
                        <MudMenu Label="Ações" PositionAtCursor="true">
                            <MudMenuItem OnClick="() => Delete(context)">Excluir</MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    @if (_table?.GetFilteredItemsCount() == 0 && !_table.Loading)
                    {
                        <MudStack Class="ma-10" AlignItems="AlignItems.Center">
                            <MudText>Nenhum código de registro encontrado.</MudText>
                        </MudStack>
                    }
                    <MudTablePager PageSizeOptions="@(new[] { 10, 20, 30 })"/>
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private MudTable<RegisterCodeFormatted>? _table;

    public class RegisterCodeFormatted : RegisterCode
    {
        public bool ShowCode { get; set; }
        // public string? Email { get; set; }
    }


    private async Task<TableData<RegisterCodeFormatted>> ServerReload(TableState state, CancellationToken token)
    {
        var paginationQuery = new PaginationQuery
        {
            Page = state.Page,
            PerPage = state.PageSize,
        };

        var result = await GetRegisterCodes(paginationQuery);

        var tableData = new TableData<RegisterCodeFormatted>();
        if (result == null) return tableData;

        var items = new List<RegisterCodeFormatted>();

        if (result.Data != null)
        {
            items.AddRange(result.Data
                .Select(registerCode => new RegisterCodeFormatted
                    {
                        Id = registerCode.Id,
                        IsUsed = registerCode.IsUsed,
                        User = registerCode.User,
                        UserId = registerCode.UserId,
                        ShowCode = false,
                    }
                )
            );
        }

        return new TableData<RegisterCodeFormatted> { Items = items, TotalItems = result.TotalItems };
    }

    async Task<Pagination<RegisterCode>?> GetRegisterCodes(PaginationQuery paginationQuery)
    {
        var pagination = new Pagination<RegisterCode>
        {
            Data = new List<RegisterCode>()
        };

        try
        {
            return await Http.GetFromJsonAsync<Pagination<RegisterCode>>(
                HandleUrlQueries.FromPagination("register-code", paginationQuery)
            );
        }
        catch (HttpRequestException e)
        {
            HandleHttpErrorSnackbar.GeneralError(e);
        }

        return pagination;
    }

    private async Task Generate()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            BackdropClick = false,
            MaxWidth = MaxWidth.ExtraSmall
        };

        var dialog = await DialogService.ShowAsync<CreateRegisterCodeModal>("Gerar código de registro", options);
        var result = await dialog.Result;

        if (result is { Canceled: false }) await _table!.ReloadServerData();
    }

    private async Task Delete(RegisterCode registerCode)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            BackdropClick = false,
            MaxWidth = MaxWidth.ExtraSmall,
        };

        var dialogParams = new DialogParameters<DeleteRegisterCodeModal>
        {
            { "RegisterCode", registerCode }
        };

        var dialog = await DialogService.ShowAsync<DeleteRegisterCodeModal>("Apagar código de registro", dialogParams, options);
        var result = await dialog.Result;

        if (result is { Canceled: false }) await _table!.ReloadServerData();
    }

}