@page "/register-codes"

@inject HttpClient Http 
@inject IJSRuntime Js 
@inject IDialogService DialogService 
@inject HandleHttpErrorSnackbar HandleHttpErrorSnackbar


<PageTitle>Códigos de Registro</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-20">
    <MudGrid>
        <MudItem sm="12">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pb-4">
                <MudText Typo="Typo.h4" HtmlTag="h2">Códigos de Registro</MudText>
                
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Generate">Gerar Código</MudButton>
            </MudStack>

            <MudTable Hover="true" Items="@_registerCodeList" Loading="@_isFetch">
                <HeaderContent>
                    <MudTh>Chave</MudTh>
                    <MudTh>Disponível</MudTh>
                    <MudTh>Usada por</MudTh>
                    <MudTh>Para uso de</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Chave">
                        <MudToggleIconButton
                            @bind-Toggled="context.ShowCode"
                            Icon="@Icons.Material.Filled.CodeOff"
                            ToggledIcon="@Icons.Material.Filled.Code">
                        </MudToggleIconButton>

                        @if (context.ShowCode)
                        {
                            <CopyHiddenText DisableCopy="@(context.IsUsed)" Text="@context.Id" />
                        }
                        else
                        {
                            @("...")
                        }
                    </MudTd>
                    <MudTd DataLabel="Disponível">@(!context.IsUsed ? "Sim" : "Não") </MudTd>
                    <MudTd DataLabel="Usada por">@(!string.IsNullOrEmpty(context.User?.Name) ? context.User.Name : "-")</MudTd>
                    <MudTd DataLabel="Para uso de">@(!string.IsNullOrEmpty(context.Email) ? context.Email : "-")</MudTd>
                    <MudTd DataLabel="Ações">
                        <MudMenu Label="Ações" PositionAtCursor="true">
                            <MudMenuItem OnClick="() => Delete(context)">Excluir</MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<RegisterCodeFormatted>? _registerCodeList = new();
    private bool _isFetch;

    public class RegisterCodeFormatted : RegisterCode
    {
        public bool ShowCode { get; set; }
        public string? Email { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isFetch = true;
            var resultList = await Http.GetFromJsonAsync<List<RegisterCode>>("register-code");
            if (resultList == null) return;

            _registerCodeList = new List<RegisterCodeFormatted>();

            foreach (var registerCode in resultList)
            {
                _registerCodeList.Add(new RegisterCodeFormatted
                {
                    Id = registerCode.Id,
                    IsUsed = registerCode.IsUsed,
                    User = registerCode.User,
                    UserId = registerCode.UserId,
                    ShowCode = false,
                });
            }
        }
        catch (HttpRequestException e)
        {
            HandleHttpErrorSnackbar.GeneralError(e);
        }
        finally
        {
            _isFetch = false;
        }
    }

    private Task Generate()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            BackdropClick = false,
            MaxWidth = MaxWidth.ExtraSmall
        };
        
        return DialogService.ShowAsync<CreateRegisterCodeModal>("Gerar código de registro", options);
    }
    
    private Task Delete(RegisterCode registerCode)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            BackdropClick = false,
            MaxWidth = MaxWidth.ExtraSmall,
        };

        var dialogParams = new DialogParameters<DeleteRegisterCodeModal>
        {
            { "RegisterCode", registerCode }
        };

        return DialogService.ShowAsync<DeleteRegisterCodeModal>("Apagar código de registro", dialogParams, options);
    }

}