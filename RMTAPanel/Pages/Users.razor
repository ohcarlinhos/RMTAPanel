@page "/users"
@using Shared.User
@using Shared
@attribute [Authorize]

<PageTitle>Usuários</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-20">
    <MudGrid>
        <MudItem sm="12">
            <MudText Typo="Typo.h4" HtmlTag="h2" Class="pb-4">Usuários</MudText>

            @if (_userList.Count > 0)
            {
                <MudTable Hover="true" Items="@_userList">
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Nome</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Ativo</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Nome">@context.Name</MudTd>
                        <MudTd DataLabel="Email">@context.Email</MudTd>
                        <MudTd DataLabel="Ativo">@(context.IsActive ? "Sim" : "Não")</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager/>
                    </PagerContent>
                </MudTable>
            }
            else
            {
                <MudPaper Class="pa-5">
                    <MudText>Nenhum usuário encontrado.</MudText>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    [Inject] HttpClient Http { get; set; }
    private List<UserMap> _userList = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Pagination<UserMap>>("user");
            if (result?.Data != null) _userList = result.Data;
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine(e.Message);
        }
    }

}