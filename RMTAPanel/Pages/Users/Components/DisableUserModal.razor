@using Shared.User

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject HandleHttpErrorSnackbar HandleHttpErrorSnackbar


<MudDialog>
    <TitleContent>
        Deseja confirmar a @(User.IsActive ? "desativação" : "ativação") do usuário "@User.Name"?
    </TitleContent>

    <DialogContent>
        <CustomActionsModal IsFetch="@_isFetch">
            <MudButton OnClick="@Cancel" Disabled="_isFetch">Cancelar</MudButton>

            <MudButton Color="Color.Error" OnClick="@Confirm" Disabled="_isFetch">
                Confirmar
            </MudButton>
        </CustomActionsModal>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public UserMap User { get; set; } = new();

    private bool _isFetch;

    private void Cancel() => MudDialog!.Cancel();

    private async Task Confirm()
    {
        try
        {
            _isFetch = true;

            var isActive = !User.IsActive;
            var term = isActive ? "ativado" : "desativado";

            var response = await Http.PostAsJsonAsync($"user/disable/{User.Id}", new { IsActive = isActive });
            if (await HandleHttpErrorSnackbar.IsNotOk(response)) return;

            Snackbar.Add($"Usuário {term} com sucesso.", Severity.Success);
            MudDialog!.Close();
        }
        catch (HttpRequestException e)
        {
            HandleHttpErrorSnackbar!.GeneralError(e);
        }
        finally
        {
            _isFetch = false;
        }
    }

}