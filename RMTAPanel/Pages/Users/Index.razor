@page "/users"
@using Shared.User

<PageTitle>Usuários</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-20">
    <MudGrid>
        <MudItem sm="12">
            <MudText Typo="Typo.h4" HtmlTag="h2" Class="pb-4">Usuários</MudText>

            @if (_userList == null)
            {
                <MudText>Carregando...</MudText>
            }
            else if (_userList.Count > 0)
            {
                <MudTable Hover="true" Items="@_userList">
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Nome</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Ativo</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>

                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Nome">@context.Name</MudTd>
                        <MudTd DataLabel="Email">@context.Email</MudTd>
                        <MudTd DataLabel="Ativo">@(context.IsActive ? "Sim" : "Não")</MudTd>
                        
                        <MudTd DataLabel="Ações">
                            <MudMenu Label="Ações" PositionAtCursor="true">
                                <MudMenuItem OnClick="EditUser">Editar</MudMenuItem>
                                <MudMenuItem OnClick="EditPassword">Alterar senha</MudMenuItem>
                                <MudMenuItem OnClick="Disable">Desativar</MudMenuItem>
                                @* <MudMenuItem OnClick="Delete">Apagar</MudMenuItem> *@
                            </MudMenu>
                        </MudTd>
                    </RowTemplate>

                    <PagerContent>
                        <MudTablePager/>
                    </PagerContent>
                </MudTable>
            }
            else
            {
                <MudPaper Class="pa-5">
                    <MudText>Nenhum usuário encontrado.</MudText>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    [Inject] HttpClient? Http { get; set; }
    [Inject] IDialogService? DialogService { get; set; }
    [Inject] ISnackbar? Snackbar { get; set; }

    private List<UserMap>? _userList;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http!.GetFromJsonAsync<Pagination<UserMap>>("user");
            if (response?.Data != null) _userList = response.Data;
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode == HttpStatusCode.Forbidden)
                Snackbar!.Add(ApiErrors.Forbidden, Severity.Error);
        }
    }

    private Task EditUser()
    {
        var options = new DialogOptions
        {
            CloseButton = true, 
            FullWidth = true, 
            CloseOnEscapeKey = false, 
            BackdropClick = false
        };

        return DialogService!.ShowAsync<EditUserModal>("Editar usuáiro", options);
    }

    private Task EditPassword()
    {
        var options = new DialogOptions
        {
            CloseButton = true, 
            FullWidth = true, 
            CloseOnEscapeKey = false, 
            BackdropClick = false
        };
        
        return DialogService!.ShowAsync<EditPasswordModal>("Alterar senha", options);
    }
    
    private Task Disable()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false, 
            BackdropClick = false
        };
        
        return DialogService!.ShowAsync<DisableUserModal>("Desativar usuário", options);
    }
    
    // private Task Delete()
    // {
    //     var options = new DialogOptions
    //     {
    //         CloseOnEscapeKey = false, 
    //         BackdropClick = false,
    //         
    //     };
    //     
    //     return DialogService!.ShowAsync<DeletePasswordModal>("Apagar usuário", options);
    // }

}