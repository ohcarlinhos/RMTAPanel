@page "/users"
@using Shared.User
@using System.Net
@using System.Security.Claims
@using Shared.General.Util

<PageTitle>Usuários</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-20">
    <MudGrid>
        <MudItem sm="12">
            <MudText Typo="Typo.h4" HtmlTag="h2" Class="pb-4">Usuários</MudText>
            <MudTable Hover="true" Items="@_userList" Loading="@_isFetch">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Nome</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Ativo</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Nome">@context.Name</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="Ativo">@(context.IsActive ? "Sim" : "Não")</MudTd>

                    <MudTd DataLabel="Ações">
                        <MudMenu Label="Ações" PositionAtCursor="true">
                            <MudMenuItem OnClick="() => EditUser(context)">Editar</MudMenuItem>
                            <MudMenuItem OnClick="() => EditPassword(context.Id)">Alterar senha</MudMenuItem>
                           
                            <MudMenuItem
                                OnClick="() => Disable(context)"
                                Disabled="@(context.Id == UserClaims.Id(MyClaims))">
                                @(context.IsActive ? "Desativar" : "Ativar")
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Inject] HttpClient? Http { get; set; }
    [Inject] IDialogService? DialogService { get; set; }
    [Inject] ISnackbar? Snackbar { get; set; }

    [CascadingParameter] private Task<AuthenticationState>? AuthState { get; set; }

    private ClaimsPrincipal MyClaims { get; set; } = new();

    private List<UserMap>? _userList = new();
    private bool _isFetch;

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();

        if (AuthState != null)
        {
            var authState = await AuthState;
            MyClaims = authState.User;
        }
    }

    private async Task GetUsers()
    {
        try
        {
            _isFetch = true;
            var response = await Http!.GetFromJsonAsync<Pagination<UserMap>>("user");
            if (response?.Data != null) _userList = response.Data;
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode == HttpStatusCode.Forbidden)
                Snackbar!.Add(ApiErrors.Forbidden, Severity.Error);
        }
        finally
        {
            _isFetch = false;
        }
    }

    private Task EditUser(UserMap user)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            CloseOnEscapeKey = false,
            BackdropClick = false
        };

        var dialogParams = new DialogParameters
        {
            { "User", user }
        };

        return DialogService!.ShowAsync<EditUserModal>("Editar usuáiro", dialogParams, options);
    }

    private Task EditPassword(int id)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            CloseOnEscapeKey = false,
            BackdropClick = false
        };

        var dialogParams = new DialogParameters<EditPasswordModal>
        {
            { "Id", id }
        };

        return DialogService!.ShowAsync<EditPasswordModal>("Alterar senha", dialogParams, options);
    }

    private async Task Disable(UserMap user)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            BackdropClick = false,
            MaxWidth = MaxWidth.ExtraSmall
        };

        var dialogParams = new DialogParameters<DisableUserModal>
        {
            { "User", user }
        };

        var dialog = await DialogService!.ShowAsync<DisableUserModal>("Desativar usuário", dialogParams, options);
        var result = await dialog.Result;

        if (result!.Canceled == false)
        {
            await GetUsers();
        }
    }

}