@page "/users"

@using Shared.User
@using System.Security.Claims
@using Shared.General.Util

@inject HttpClient Http
@inject IDialogService DialogService
@inject HandleHttpErrorSnackbar HandleHttpErrorSnackbar

<PageTitle>Usuários</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-20">
    <MudGrid>
        <MudItem sm="12">
            <MudText Typo="Typo.h4" HtmlTag="h2" Class="pb-4">Usuários</MudText>

            <MudTable Hover="true" ServerData="ServerReload" @ref="_table">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Nome</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Tipo</MudTh>
                    <MudTh>Ativo</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Nome">@context.Name</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="Tipo">@context.UserRoleLabel</MudTd>
                    <MudTd DataLabel="Ativo">@(context.IsActive ? "Sim" : "Não")</MudTd>

                    <MudTd DataLabel="Ações">
                        <MudMenu Label="Ações" PositionAtCursor="true">
                            <MudMenuItem OnClick="() => EditUser(context)">Editar</MudMenuItem>
                            <MudMenuItem OnClick="() => EditPassword(context.Id)">Alterar senha</MudMenuItem>

                            <MudMenuItem
                                OnClick="() => Disable(context)"
                                Disabled="@(context.Id == UserClaims.Id(MyClaims))">
                                @(context.IsActive ? "Desativar" : "Ativar")
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    @if (_table?.GetFilteredItemsCount() == 0 && !_table.Loading)
                    {
                        <MudStack Class="ma-10" AlignItems="AlignItems.Center">
                            <MudText>Nenhum usuário encontrado.</MudText>
                        </MudStack>
                    }
                    <MudTablePager PageSizeOptions="@(new[] { 10, 20, 30 })"/>
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private MudTable<UserMap>? _table;
    [CascadingParameter] private Task<AuthenticationState>? AuthState { get; set; }

    private ClaimsPrincipal MyClaims { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (AuthState != null)
        {
            var authState = await AuthState;
            MyClaims = authState.User;
        }
    }

    private async Task<TableData<UserMap>> ServerReload(TableState state, CancellationToken token)
    {
        var result = await GetUsers();
        var tableData = new TableData<UserMap>();
        if (result == null) return tableData;

        tableData.Items = result.Data;
        tableData.TotalItems = result.TotalItems;
        return tableData;
    }

    private async Task<Pagination<UserMap>?> GetUsers()
    {
        try
        {
            return await Http.GetFromJsonAsync<Pagination<UserMap>>("user");
        }
        catch (HttpRequestException e)
        {
            HandleHttpErrorSnackbar.GeneralError(e);
        }

        return null;
    }

    private async Task EditUser(UserMap user)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            CloseOnEscapeKey = false,
            BackdropClick = false
        };

        var dialogParams = new DialogParameters
        {
            { "User", user }
        };

        var dialog = await DialogService.ShowAsync<EditUserModal>("Editar usuáiro", dialogParams, options);
        var result = await dialog.Result;
        if (result is { Canceled: false }) await _table!.ReloadServerData();
    }

    private async Task EditPassword(int id)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            CloseOnEscapeKey = false,
            BackdropClick = false
        };

        var dialogParams = new DialogParameters<EditPasswordModal>
        {
            { "Id", id }
        };

        var dialog = await DialogService.ShowAsync<EditPasswordModal>("Alterar senha", dialogParams, options);
        var result = await dialog.Result;
        if (result is { Canceled: false }) await _table!.ReloadServerData();
    }

    private async Task Disable(UserMap user)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            BackdropClick = false,
            MaxWidth = MaxWidth.ExtraSmall
        };

        var dialogParams = new DialogParameters<DisableUserModal>
        {
            { "User", user }
        };

        var dialog = await DialogService.ShowAsync<DisableUserModal>("Desativar usuário", dialogParams, options);
        var result = await dialog.Result;
        if (result is { Canceled: false }) await _table!.ReloadServerData();
    }

}